openapi: 3.0.0
info:
  description: |
    Documentation
  version: '1.0'
  title: 'Coderslab'
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: Codando Community
    email: codando.community@gmail.com
    url: https://github.com/codando-community/
#  license:
#    name: Apache 2.0
#    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: User
    description: integração de usuário no Coderslab
  - name: Group
    description: integração de grupo no Coderslab
  - name: UnionUserGroup
    description: integração da união entre usuário e grupo no Coderslab
  - name: Interest
    description: integração de interesse no Coderslab
  - name: Subject
    description: integração de assunto no Coderslab
paths:
  # User
  /user/create:
    post:
      tags: 
        - User
      summary: Cria um novo usuário
      description: Cria um novo perfil para o usuário que precisa acessar a aplicação pela primeira vez.
      operationId: user_create
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '403':
          description: Forbidden
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user.Request'
        required: true
  /user/read/byId/{id}:
    get:
      summary: Busca um usuário com base em um ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário gerado pelo MongoDB
          schema:
            type: string
            format: ObjectId
            minimum: 1
      tags:
        - User
      description: Busca por um usuário já resgistrado na plataforma com base em seu ID gerado pelo MongoDB.
      operationId: user_byId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_read.Response'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /user/read/byUsername/{username}:
    get:
      summary: Busca um usuário com base em um username
      parameters:
        - name: username
          in: path
          required: true
          description: Username informado pelo usuário durante cadastro
          schema:
            type: string
            minimum: 1
      tags:
        - User
      description: Busca por um usuário já resgistrado na plataforma com base em seu username fornecido durante o cadastro.
      operationId: user_byUsername
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_read.Response'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /user/read/byEmail/{email}:
    get:
      summary: Busca um usuário com base em um e-mail
      parameters:
        - name: email
          in: path
          required: true
          description: E-mail informado pelo usuário durante cadastro
          schema:
            type: string
            minimum: 1
      tags:
        - User
      description: Busca por um usuário já resgistrado na plataforma com base em seu e-mail fornecido durante o cadastro.
      operationId: user_byEmail
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_read.Response'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /user/read/all:
    get:
      tags:
        - User
      summary: Busca uma lista de usuários
      description: Busca por todos os usuários já registrados na plataforma e retorna uma lista deles ordenada por seu username em ordem alfabética.
      operationId: user_all
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_read_all.Response'
        '400':
          description: Bad Request
  /user/update/{id}:
    put:
      tags:
        - User
      summary: Atualiza um usuário com base em um ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário gerado pelo MongoDB
          schema:
            type: string
            format: ObjectId
            minimum: 1
      description: Atualiza os dados de perfil de um usuário com base em seu ID gerado pelo MongoDB.
      operationId: user_update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_read.Response'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user.Request'
        required: true
  /user/delete/{id}:
    delete:
      tags:
        - User
      summary: Deleta um usuário com base em um ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário gerado pelo MongoDB
          schema:
            type: string
            format: ObjectId
            minimum: 1
      description: Deleta o registro do usuário na aplicação não sendo mais possível acessa-la após o processo.
      operationId: user_delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
        '404':
            description: Not Found

  # Group
  /group/create:
    post:
      tags: 
        - Group
      summary: Criação de um novo grupo
      description: Cria um novo grupo de estudos de um determinado assunto e nível.
      operationId: group_create
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group.Request'
        required: true
  /group/read/byId/{id}:
    get:
      summary: Busca um grupo com base em um ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID do grupo gerado pelo MongoDB
          schema:
            type: string
            format: ObjectId
            minimum: 1
      tags:
        - Group
      description: Busca por um grupo já resgistrado na plataforma com base em seu ID gerado pelo MongoDB.
      operationId: group_byId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_read.Response'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /group/read/byToken/{token}:
    get:
      summary: Busca um grupo com base em um token
      parameters:
        - name: token
          in: path
          required: true
          description: Token do grupo gerado
          schema:
            type: string
            minimum: 1
      tags:
        - Group
      description: Busca por um grupo já resgistrado na plataforma com base em seu token.
      operationId: group_byToken
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_read.Response'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /group/read/byName/{name}:
    get:
      tags:
        - Group
      summary: Busca uma lista de grupos com base em uma parte do nome
      parameters:
        - name: name
          in: path
          required: true
          description: Nome do grupo
          schema:
            type: string
            minimum: 1
      description: Busca por parte do nome de grupos já registrados na plataforma e retorna uma lista deles ordenada pelo nome em ordem alfabética.
      operationId: group_byName
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_read_all.Response'
        '400':
          description: Bad Request
  /group/read/byCategory/{category}:
    get:
      tags:
        - Group
      summary: Busca uma lista de grupos com base em uma categoria
      parameters:
        - name: category
          in: path
          required: true
          description: Categoria dos grupos
          schema:
            type: string
            minimum: 1
      description: Busca todos os grupos já registrados na plataforma que possuem uma determianda categoria e retorna uma lista deles ordenada pelo nome em ordem alfabética.
      operationId: group_byCategory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_read_all.Response'
        '400':
          description: Bad Request
  /group/read/bySubject/{subject}:
    get:
      tags:
        - Group
      summary: Busca uma lista de grupos com base em um assunto
      parameters:
        - name: subject
          in: path
          required: true
          description: Assunto dos grupos
          schema:
            type: string
            minimum: 1
      description: Busca todos os grupos já registrados na plataforma que possuem um determiando assunto e retorna uma lista deles ordenada pelo nome em ordem alfabética.
      operationId: group_bySubject
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_read_all.Response'
        '400':
          description: Bad Request
  /group/read/all:
    get:
      tags:
        - Group
      summary: Busca uma lista de grupos
      description: Busca todos os grupos já registrados na plataforma e retorna uma lista deles ordenada pelo nome em ordem alfabética.
      operationId: group_all
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_read_all.Response'
        '400':
          description: Bad Request
  /group/update/{id}/{idUser}:
    put:
      tags:
        - Group
      summary: Atualiza um grupo com base em um ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID do grupo gerado pelo MongoDB
          schema:
            type: string
            format: ObjectId
            minimum: 1
        - name: idUser
          in: path
          required: true
          description: ID do usuário dono do grupo gerado pelo MongoDB que está tentando atualiza-lo
          schema:
            type: string
            format: ObjectId
            minimum: 1
      description: Atualiza os dados de um grupo com base em seu ID e o ID do usuário dono do grupo gerados pelo MongoDB.
      operationId: group_update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_read.Response'
        '401':
          description: Unauthorized
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '406':
          description: Not Acceptable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group.Request'
        required: true
  /group/delete/{id}/{idUser}:
    delete:
      tags:
        - Group
      summary: Deleta um grupo com base em um ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID do grupo gerado pelo MongoDB
          schema:
            type: string
            format: ObjectId
            minimum: 1
        - name: idUser
          in: path
          required: true
          description: ID do usuário dono do grupo gerado pelo MongoDB que está tentando atualiza-lo
          schema:
            type: string
            format: ObjectId
            minimum: 1
      description: Deleta o registro do grupo na aplicação não sendo mais possível acessa-lo após o processo.
      operationId: group_delete
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '400':
          description: Bad Request
        '404':
          description: Not Found
  
  # Union User Group
  /unionUserGroup/create:
    post:
      tags: 
        - UnionUserGroup
      summary: Insere um usuário em um grupo
      description: Realiza a inserção de um determinado usuário em um novo grupo do qual ele ainda não pertencia.
      operationId: unionUserGroup_create
      responses:
        '201':
          description: Created
        '403':
          description: Forbidden
        '400':
          description: Bad Request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/unionUserGroup.Request'
        required: true
  /unionUserGroup/read/users/{idGroup}:
    get:
      tags:
        - UnionUserGroup
      summary: Busca uma lista de usuários com base em um ID de um grupo
      parameters:
        - name: idGroup
          in: path
          required: true
          description: ID do grupo gerado pelo MongoDB
          schema:
            type: string
            minimum: 1
      description: Busca o ID de todos os usuário que fazem parte de determinado grupo.
      operationId: unionUserGroup_byGroup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unionUserGroup_read_all.Response'
        '400':
          description: Bad Request
  /unionUserGroup/read/groups/{idUser}:
    get:
      tags:
        - UnionUserGroup
      summary: Busca uma lista de grupos com base em um ID de um usuário
      parameters:
        - name: idUser
          in: path
          required: true
          description: ID do usuário gerado pelo MongoDB
          schema:
            type: string
            minimum: 1
      description: Busca o ID de todos os grupos dos quais determinado usuário faz parte.
      operationId: unionUserGroup_byUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unionUserGroup_read_all.Response'
        '400':
          description: Bad Request
  /unionUserGroup/delete/{idUser}/{idGroup}:
    delete:
      tags:
        - UnionUserGroup
      summary: Remove um usuário de um grupo 
      parameters:
        - name: idUser
          in: path
          required: true
          description: ID do usuário gerado pelo MongoDB
          schema:
            type: string
            format: ObjectId
            minimum: 1
        - name: idGroup
          in: path
          required: true
          description: ID do grupo gerado pelo MongoDB
          schema:
            type: string
            format: ObjectId
            minimum: 1
      description: Realiza a remoção de um determinado usuário de um grupo do qual ele pertence.
      operationId: unionUserGroup_delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
        '404':
            description: Not Found

  # Interest
  /interest/create:
    post:
      tags: 
        - Interest
      summary: Cria de um novo interesse
      description: Cria um novo interesse.
      operationId: interest_create
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/interest.Request'
        required: true
  /interest/read/byId/{id}:
    get:
      summary: Busca um interesse com base em um ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID do interesse gerado pelo MongoDB
          schema:
            type: string
            format: ObjectId
            minimum: 1
      tags:
        - Interest
      description: Busca por um interesse já resgistrado na plataforma com base em seu ID gerado pelo MongoDB.
      operationId: interest_byId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/interest_read.Response'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /interest/read/all:
    get:
      tags:
        - Interest
      summary: Busca uma lista de interesses
      description: Busca todos os interesse já registrados e retorna uma lista deles ordenada pelo assunto em ordem alfabética.
      operationId: interest_all
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/interest_read_all.Response'
        '400':
          description: Bad Request
  /interest/update/{id}:
    put:
      tags:
        - Interest
      summary: Atualiza um interesse com base em um ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID do interesse gerado pelo MongoDB
          schema:
            type: string
            format: ObjectId
            minimum: 1
      description: Atualiza o nível de um interesse com base em seu ID gerado pelo MongoDB.
      operationId: interest_update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/interest_read.Response'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '406':
          description: Not Acceptable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/interest.Request'
        required: true
  /interest/delete/{id}:
    delete:
      tags:
        - Interest
      summary: Deleta um interesse com base em um ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID do interesse gerado pelo MongoDB
          schema:
            type: string
            format: ObjectId
            minimum: 1
      description: Deleta o registro do interesse na aplicação não sendo mais possível acessa-lo após o processo.
      operationId: interest_delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
        '404':
            description: Not Found
  
  # Subject
  /subject/create:
    post:
      tags:
        - Subject
      summary: API
      description: API de criação de subject
      operationId: subject_create
      responses:
        '201':
          description: Subject created
        '400':
          description: Bad Request
        '403':
          description: Subject already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subject_create.Request'
        required: true
  /subject/read/byId/{id}:
    get:
      summary: Retorna o subject com base em um ID
      parameters:
        - name: id
          in: path
          required: true
          description: Id do subject gerado pelo MongoDB.
          schema:
            type : string
            format: uuid
            minimum: 1
      tags:
        - Subject
      description: API para retorno de um subject
      operationId: subjects_byId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subject_read.Response'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /subject/read/byLabel/{label}:
    get:
      summary: Retorna o subject com base em uma Label.
      parameters:
        - name: label
          in: path
          required: true
          description: Rótulo atribuido ao subject.
          schema:
            type : string
            minimum: 1
      tags:
        - Subject
      description: API para retorno do array de subjects
      operationId: subjects_byLabel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subject_read.Response'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /subject/read/all:
    get:
      tags:
        - Subject
      summary: API
      description: API para retorno do array de subjects
      operationId: subjects_all
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subject_all.Response'
        '400':
          description: Bad Request
  /subject/update/{id}:
    put:
      summary: Atualiza as categories de um subject com base no ID.
      parameters:
          - name: id
            in: path
            required: true
            description: Id do subject gerado pelo MongoDB.
            schema:
              type : string
              format: uuid
              minimum: 1
      tags:
        - Subject
      description: API para update de um subject
      operationId: subject_update
      responses:
        '200':
          description: Subject updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subject_read.Response'
        '400':
          description: Bad request
        '404':
            description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subject_update.Request'
        required: true
  /subject/delete/{id}:
    delete:
      summary: Deleta um subject com base em seu ID.
      parameters:
          - name: id
            in: path
            required: true
            description: Id do subject gerado pelo MongoDB.
            schema:
              type : string
              format: uuid
              minimum: 1
      tags:
        - Subject
      description: API para deletar um subject com base em seu id
      operationId: subject_delete
      responses:
        '204':
          description: Subject deleted
        '400':
          description: Bad request
        '404':
            description: Not Found
servers:
# Added by API Auto Mocking Plugin
  - url: 'https://cluster.prod.com.br/coderslab'
    description: Link do cluster produtivo - External URL PRD
components:
  schemas:
    # User
    user.Request:
      title: user.Request
      description: 'Objeto para usuário'
      type: object
      properties:
        username:
          type: string
          description: 'Username do usuário Ex: Joãozinho10'
        name:
          type: string
          description: 'Nome do usuário Ex: João'
        last_name:
          type: string
          description: 'Sobrenome do usuário Ex: Silva'
        email:
          type: string
          description: 'E-mail do usuário Ex: joao@email.com'
        discord_id:
          type: string
          description: 'ID do usuário no Discord Ex: joao#0134'
        github_id:
          type: string
          description: 'ID do usuário no GitHub Ex: joaosilva10'
        password:
          type: string
          description: 'Senha escolhida pelo usuário para utilizar na plataforma Ex: Jo@10Silv4'
        _interest_list:
          type: array
          items:
            type: string
            description: 'Lista de interesses Ex: [Node, Java]'
    user_read.Response:
      title: user_read.Response
      description: 'Objeto para usuário'
      type: object
      properties:
        _id:
          type: string
          description: 'ID gerado pelo MongoDB'
        username:
          type: string
          description: 'Username do usuário Ex: Joãozinho10'
        name:
          type: string
          description: 'Nome do usuário Ex: João'
        last_name:
          type: string
          description: 'Sobrenome do usuário Ex: Silva'
        email:
          type: string
          description: 'E-mail do usuário Ex: joao@email.com'
        discord_id:
          type: string
          description: 'ID do usuário no Discord Ex: joao#0134'
        github_id:
          type: string
          description: 'ID do usuário no GitHub Ex: joaosilva10'
        password:
          type: string
          description: 'Senha escolhida pelo usuário para utilizar na plataforma Ex: Jo@10Silv4'
        _interest_list:
          type: array
          items:
            type: string
            description: 'Lista de interesses Ex: [Node, Java]'
    user_read_all.Response:
      title: user_read_all.Response
      description: 'Lista para usuários'
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            description: 'ID gerado pelo MongoDB'
          username:
            type: string
            description: 'Username do usuário Ex: Joãozinho10'
          name:
            type: string
            description: 'Nome do usuário Ex: João'
          last_name:
            type: string
            description: 'Sobrenome do usuário Ex: Silva'
          email:
            type: string
            description: 'E-mail do usuário Ex: joao@email.com'
          discord_id:
            type: string
            description: 'ID do usuário no Discord Ex: joao#0134'
          github_id:
            type: string
            description: 'ID do usuário no GitHub Ex: joaosilva10'
          password:
            type: string
            description: 'Senha escolhida pelo usuário para utilizar na plataforma Ex: Jo@10Silv4'
          _interest_list:
            type: array
            items:
              type: string
              description: 'Lista de interesses Ex: [Node, Java]'
    
    # Group
    group.Request:
      title: group.Request
      description: 'Objeto para grupo'
      type: object
      properties:
        name:
          type: string
          description: 'Nome do grupo Ex: Desenvolvimento Web com PHP'
        category:
          type: array
          items:
            type: string
            description: 'Lista de assuntos Ex: [Node, Java]'
        level:
          type: number
          description: 'Número de 0 a 2 que represente o nível de conhecimentodo grupo Ex: 1'
        token:
          type: string
          description: 'Token de acesso para grupo'
        is_public:
          type: boolean
          description: 'Identificação para dizer se o grupo é público ou particular'
        _owner:
          type: string
          description: 'ID do dono do grupo gerado pelo MongoDB'
        _schedule_list:
          type: array
          items:
            type: string
            description: 'Lista de IDs gerado pelo MongoDB referente as reuniões do grupo'
    group_read.Response:
      title: group_read.Response
      description: 'Objeto para grupo'
      type: object
      properties:
        _id:
          type: string
          description: 'ID gerado pelo MongoDB'
        name:
          type: string
          description: 'Nome do grupo Ex: Desenvolvimento Web com PHP'
        category:
          type: array
          items:
            type: string
            description: 'Lista de assuntos Ex: [Node, Java]'
        level:
          type: number
          description: 'Número de 0 a 2 que represente o nível de conhecimentodo grupo Ex: 1'
        token:
          type: string
          description: 'Token de acesso para grupo'
        is_public:
          type: boolean
          description: 'Identificação para dizer se o grupo é público ou particular'
        _owner:
          type: string
          description: 'ID do dono do grupo gerado pelo MongoDB'
        _schedule_list:
          type: array
          items:
            type: string
            description: 'Lista de IDs gerado pelo MongoDB referente as reuniões do grupo'
    group_read_all.Response:
      title: group_read_all.Response
      description: 'Lista para grupos'
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            description: 'ID gerado pelo MongoDB'
          name:
            type: string
            description: 'Nome do grupo Ex: Desenvolvimento Web com PHP'
          category:
            type: array
            items:
              type: string
              description: 'Lista de assuntos Ex: [Node, Java]'
          level:
            type: number
            description: 'Número de 0 a 2 que represente o nível de conhecimentodo grupo Ex: 1'
          token:
            type: string
            description: 'Token de acesso para grupo'
          is_public:
            type: boolean
            description: 'Identificação para dizer se o grupo é público ou particular'
          _owner:
            type: string
            description: 'ID do dono do grupo gerado pelo MongoDB'
          _schedule_list:
            type: array
            items:
              type: string
              description: 'Lista de IDs gerado pelo MongoDB referente as reuniões do grupo'

    # Union User Group
    unionUserGroup.Request:
      title: unionUserGroup.Request
      description: 'Objeto para união entre usuário e grupo'
      type: object
      properties:
        _id_user:
          type: string
          description: 'ID do usuário gerado pelo MongoDB que está entrando no grupo'
        _id_group:
          type: string
          description: 'ID do grupo gerado pelo MongoDB no qual o usuário está entrando'
    unionUserGroup_read_all.Response:
      title: unionUserGroup_read_users.Response
      description: 'Lista para a união entre usuário e grupo'
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            description: 'ID gerado pelo MongoDB'
          _id_user:
            type: string
            description: 'ID do usuário gerado pelo MongoDB que está entrando no grupo'
          _id_group:
            type: string
            description: 'ID do grupo gerado pelo MongoDB no qual o usuário está entrando'
    
    # Interest
    interest.Request:
      title: interest.Request
      description: 'Objeto para interesse'
      type: object
      properties:
        subject_label:
          type: string
          description: 'Rótulo para o interesse Ex: NodeJs'
        level:
          type: number
          description: 'Número de 0 a 2 que represente o nível de conhecimento em determinado interesse Ex: 1'
    interest_read.Response:
      title: interest_read.Response
      description: 'Objeto para interesse'
      type: object
      properties:
        _id:
          type: string
          description: 'ID gerado pelo MongoDB'
        subject_label:
          type: string
          description: 'Rótulo para o interesse Ex: NodeJs'
        level:
          type: number
          description: 'Número de 0 a 2 que represente o nível de conhecimento em determinado interesse Ex: 1'
    interest_read_all.Response:
      title: interest_read_all.Response
      description: 'Lista para interesses'
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            description: 'ID gerado pelo MongoDB'
          subject_label:
            type: string
            description: 'Rótulo para o interesse Ex: NodeJs'
          level:
            type: number
            description: 'Número de 0 a 2 que represente o nível de conhecimento em determinado interesse Ex: 1'
    
    # Subject
    subject_create.Request:
      title: subject.Request
      description: 'Object for subject'
      type: object
      properties:
        label:
          type: string
          description: 'Rotúlo para o assunto Ex: NodeJs'
        categories:
          type: array
          items:
            type: string
            description: 'Array de categorias Ex: [Web, Mobile]'
    subject_update.Request:
      title: subject.Request
      description: 'Object for subject'
      type: object
      properties:
        categories:
          type: array
          items:
            type: string
            description: 'Array de categorias Ex: [Web, Mobile]'
    subject_all.Response:
      title: subject_read_all.Response
      description: 'Array for subjects'
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            description: 'Id gerado pelo MongoDB'
          label:
            type: string
            description: 'Rotúlo para o assunto Ex: NodeJs'
          categories:
            type: array
            items:
              type: string
              description: 'Array de categorias Ex: [Web, Mobile]'
    subject_read.Response:
      title: subject_read.Response
      description: 'Object for subject'
      type: object
      properties:
        id:
          type: string
          description: 'Id gerado pelo MongoDB'
        label:
          type: string
          description: 'Rotúlo para o assunto Ex: NodeJs'
        categories:
          type: array
          items:
            type: string
            description: 'Array de categorias Ex: [Web, Mobile]'